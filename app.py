from flask import Flask, request, jsonify, make_response
import sqlite3
import os
import random
import secrets
import ssl
import xml.etree.ElementTree as ET
import hashlib
import urllib.request  

app = Flask(__name__)

bd = 'example.db'


@app.route('/hash-md5', methods=['POST'])
def hash_md5():
    password = request.form['password']
    hash_object = hashlib.md5(password.encode()) 
    return jsonify({'hashed_password': hash_object.hexdigest()})


@app.route('/unsafe-methods', methods=['GET', 'POST', 'PUT', 'DELETE'])
def unsafe_methods():
    if request.method == 'GET':
        return jsonify({'message': 'GET request received'})
    elif request.method == 'POST':
        return jsonify({'message': 'POST request received'})
    elif request.method == 'PUT':
        return jsonify({'message': 'PUT request received'})
    elif request.method == 'DELETE':
        return jsonify({'message': 'DELETE request received'})


@app.route('/create-cookie', methods=['GET'])
def create_cookie():
    resp = make_response("Cookie set")
    resp.set_cookie('session_id', '1234567890') 
    return resp


@app.route('/generate-weak-key')
def generate_weak_key():
    weak_key = random.getrandbits(128)  
    return jsonify({'key': hex(weak_key)})


@app.route('/fetch-insecure', methods=['GET'])
def fetch_insecure():
    url = request.args.get('url')
    context = ssl._create_unverified_context()  
    with urllib.request.urlopen(url, context=context) as response:
        data = response.read()
    return jsonify({'data': data.decode('utf-8')})

if __name__ == '__main__':
    app.run(debug=True) 



